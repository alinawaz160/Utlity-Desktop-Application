/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package i2putility.subScreens;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import i2putility.components.RoundedPanel;
import java.awt.Color;
import java.awt.List;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Alee
 */
public class Menu3 extends javax.swing.JInternalFrame {

    Color DefaultColor,HoveredColor; 
    public Menu3() {
        initComponents();
        this.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        
        DefaultColor=new Color(54,70,78);
        HoveredColor = new Color(240,151,70);
        
        clientSystem.setBackground(DefaultColor);
        appversions.setBackground(DefaultColor);
        client1.setBackground(DefaultColor);
        
        Systeminfo();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appversions = new RoundedPanel(50);
        stopTomcat2 = new javax.swing.JLabel();
        stopTomcat3 = new javax.swing.JLabel();
        stopTomcat4 = new javax.swing.JLabel();
        stopTomcat5 = new javax.swing.JLabel();
        clientSystem = new RoundedPanel(50);
        stopTomcat1 = new javax.swing.JLabel();
        systemIp = new javax.swing.JLabel();
        clientPhone = new javax.swing.JLabel();
        clientWndows = new javax.swing.JLabel();
        dashboardLog = new javax.swing.JLabel();
        client1 = new RoundedPanel(50);
        stopTomcat6 = new javax.swing.JLabel();
        clientName1 = new javax.swing.JLabel();
        clientPhone1 = new javax.swing.JLabel();
        clientProduct1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(770, 510));

        appversions.setBackground(new java.awt.Color(54, 70, 78));
        appversions.setPreferredSize(new java.awt.Dimension(129, 129));
        appversions.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                appversionsMouseMoved(evt);
            }
        });
        appversions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appversionsMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                appversionsMouseExited(evt);
            }
        });

        stopTomcat2.setBackground(new java.awt.Color(54, 70, 78));
        stopTomcat2.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        stopTomcat2.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-java-96.png"))); // NOI18N
        stopTomcat2.setText("Java");
        stopTomcat2.setPreferredSize(new java.awt.Dimension(129, 129));

        stopTomcat3.setBackground(new java.awt.Color(54, 70, 78));
        stopTomcat3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        stopTomcat3.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-postgresql-50.png"))); // NOI18N
        stopTomcat3.setText(" Postgres");
        stopTomcat3.setPreferredSize(new java.awt.Dimension(129, 129));

        stopTomcat4.setBackground(new java.awt.Color(54, 70, 78));
        stopTomcat4.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        stopTomcat4.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat4.setText("v12");
        stopTomcat4.setPreferredSize(new java.awt.Dimension(129, 129));

        stopTomcat5.setBackground(new java.awt.Color(54, 70, 78));
        stopTomcat5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        stopTomcat5.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat5.setText("v8");
        stopTomcat5.setPreferredSize(new java.awt.Dimension(129, 129));

        javax.swing.GroupLayout appversionsLayout = new javax.swing.GroupLayout(appversions);
        appversions.setLayout(appversionsLayout);
        appversionsLayout.setHorizontalGroup(
            appversionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appversionsLayout.createSequentialGroup()
                .addGroup(appversionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, appversionsLayout.createSequentialGroup()
                        .addComponent(stopTomcat2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(stopTomcat5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, appversionsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(stopTomcat3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopTomcat4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 40, Short.MAX_VALUE))
        );
        appversionsLayout.setVerticalGroup(
            appversionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appversionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appversionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopTomcat2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(stopTomcat5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appversionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stopTomcat3, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(stopTomcat4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        clientSystem.setBackground(new java.awt.Color(54, 70, 78));
        clientSystem.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                clientSystemMouseMoved(evt);
            }
        });
        clientSystem.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                clientSystemMouseWheelMoved(evt);
            }
        });
        clientSystem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientSystemMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clientSystemMouseExited(evt);
            }
        });

        stopTomcat1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-computer-96.png"))); // NOI18N
        stopTomcat1.setPreferredSize(new java.awt.Dimension(129, 129));

        systemIp.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        systemIp.setForeground(new java.awt.Color(255, 255, 255));
        systemIp.setText("192.168.10.102");

        clientPhone.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        clientPhone.setForeground(new java.awt.Color(255, 255, 255));
        clientPhone.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientPhone.setText("03003102321");

        clientWndows.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        clientWndows.setForeground(new java.awt.Color(255, 255, 255));
        clientWndows.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientWndows.setText("Point Of Sale");

        javax.swing.GroupLayout clientSystemLayout = new javax.swing.GroupLayout(clientSystem);
        clientSystem.setLayout(clientSystemLayout);
        clientSystemLayout.setHorizontalGroup(
            clientSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientSystemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(clientSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientWndows, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(systemIp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        clientSystemLayout.setVerticalGroup(
            clientSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientSystemLayout.createSequentialGroup()
                .addGroup(clientSystemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientSystemLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(systemIp, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientWndows, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(clientSystemLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(stopTomcat1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        dashboardLog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        client1.setBackground(new java.awt.Color(54, 70, 78));
        client1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                client1MouseMoved(evt);
            }
        });
        client1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                client1MouseWheelMoved(evt);
            }
        });
        client1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                client1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                client1MouseExited(evt);
            }
        });

        stopTomcat6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/client.png"))); // NOI18N
        stopTomcat6.setPreferredSize(new java.awt.Dimension(129, 129));

        clientName1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        clientName1.setForeground(new java.awt.Color(255, 255, 255));
        clientName1.setText("Ahmed");

        clientPhone1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        clientPhone1.setForeground(new java.awt.Color(255, 255, 255));
        clientPhone1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientPhone1.setText("03003102321");

        clientProduct1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        clientProduct1.setForeground(new java.awt.Color(255, 255, 255));
        clientProduct1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        clientProduct1.setText("Point Of Sale");

        javax.swing.GroupLayout client1Layout = new javax.swing.GroupLayout(client1);
        client1.setLayout(client1Layout);
        client1Layout.setHorizontalGroup(
            client1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(client1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(client1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientProduct1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(clientName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        client1Layout.setVerticalGroup(
            client1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(client1Layout.createSequentialGroup()
                .addGroup(client1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(client1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clientProduct1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(client1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(stopTomcat6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(clientSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(appversions, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(dashboardLog, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(client1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(439, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(appversions, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(clientSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(dashboardLog, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(client1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(287, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientSystemMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientSystemMouseMoved
        clientSystem.setBackground(HoveredColor);
    }//GEN-LAST:event_clientSystemMouseMoved

    private void clientSystemMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_clientSystemMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_clientSystemMouseWheelMoved

    private void clientSystemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientSystemMouseExited
        clientSystem.setBackground(DefaultColor);
    }//GEN-LAST:event_clientSystemMouseExited

    private void appversionsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appversionsMouseExited
        appversions.setBackground(DefaultColor);
    }//GEN-LAST:event_appversionsMouseExited

    private void appversionsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appversionsMouseMoved
       appversions.setBackground(HoveredColor);
    }//GEN-LAST:event_appversionsMouseMoved

    private void clientSystemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientSystemMouseClicked
        
    }//GEN-LAST:event_clientSystemMouseClicked

    private void appversionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appversionsMouseClicked
        
    }//GEN-LAST:event_appversionsMouseClicked

    private void client1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client1MouseMoved
         client1.setBackground(HoveredColor);
    }//GEN-LAST:event_client1MouseMoved

    private void client1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_client1MouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_client1MouseWheelMoved

    private void client1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_client1MouseClicked

    private void client1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_client1MouseExited
       client1.setBackground(DefaultColor);
    }//GEN-LAST:event_client1MouseExited
     
    private Boolean clientInfo(){
        try {
            String licenseKey  = getlicenseKey();
//            apiRequest("http://localhost:9093","POST","{\"license_key\": \"" + licenseKey + "\"}");
             JsonArray dataArray = apiRequest("http://localhost:9093/account/accountInitiate","GET","");
              for (JsonElement element : dataArray) {
            JsonObject dataObject = element.getAsJsonObject();
            String name = dataObject.get("client_Name").getAsString();
            String phone = dataObject.get("clientPhoneNumber").getAsString();
            String product = dataObject.get("Product_Name").getAsString();
            
            systemIp.setText(name);
            clientPhone.setText(phone);
            clientWndows.setText(product);
        }
        } catch (Exception ex) {
            dashboardLog.setText(ex.getMessage());
        }
        return true;
    }
    
    private JsonArray apiRequest(String url , String method ,String requestBody)throws Exception{
        
        URL endpoint = new URL(url);

        HttpURLConnection connection = (HttpURLConnection) endpoint.openConnection();

        connection.setRequestMethod(method);
        
        if(!method.equalsIgnoreCase("GET")){
            connection.setDoOutput(true);
            connection.setDoInput(true);

            connection.setRequestProperty("Content-Type", "application/json");

            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.write(requestBody.getBytes(StandardCharsets.UTF_8));
            outputStream.flush();
            outputStream.close();
        }
        int responseCode = connection.getResponseCode();
        System.out.println("Response Code: " + responseCode);

        // Read the response from the input stream
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String line;
        StringBuilder response = new StringBuilder();

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }

        reader.close();
        
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonObject jsonObject = gson.fromJson(response.toString(), JsonObject.class);
        JsonArray dataArray = jsonObject.getAsJsonArray("data");
        connection.disconnect();
        
        return dataArray;
    }
    
    private String getlicenseKey(){
        String filePath = "C:\\I2p\\apache-tomcat-9.0.52\\poslicence.json";
        String extractedText = null;
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            StringBuilder fileContent = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                fileContent.append(line).append("\n");
            }

            extractedText = extractText(fileContent.toString());
            if (extractedText == null || extractedText == "") {
              dashboardLog.setText("license key not found");  
            } 
        } catch (IOException e) {
            dashboardLog.setText(e.getMessage());
        }
        return extractedText;
    }
    
    private String extractText(String fileContent) {
        Pattern pattern = Pattern.compile("\"key\":\\s*\"(.*?)\"");
        Matcher matcher = pattern.matcher(fileContent);
        String matched = null;
        if (matcher.find()) {
            matched = matcher.group(1);
        }

        return matched;
    }
    
    private void Systeminfo(){
        ProcessBuilder builder = new ProcessBuilder("/bin/bash", "/c","ipconfig");
        getOperatingSystem();
        Process process = null;
        try {
            process = builder.start();
        } catch (IOException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Wait for the process to complete
        int exitCode = 0;
        try {
            exitCode = process.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (exitCode == 0) {
            try {
                InputStream inputStream = process.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.contains("IPv4 Address")) {
                        String[] parts = line.split(":");
                        if (parts.length >= 2) {
                            String ipAddress = parts[1].trim();
                            systemIp.setText(ipAddress);
                        }
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            InputStream stderr = process.getErrorStream();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String finalLine = line;
                    SwingUtilities.invokeLater(() -> dashboardLog.setText(finalLine + "\n"));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void getOperatingSystem(){
        String osName = System.getProperty("os.name").toUpperCase();
        clientWndows.setText(osName);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appversions;
    private javax.swing.JPanel client1;
    private javax.swing.JLabel clientName1;
    private javax.swing.JLabel clientPhone;
    private javax.swing.JLabel clientPhone1;
    private javax.swing.JLabel clientProduct1;
    private javax.swing.JPanel clientSystem;
    private javax.swing.JLabel clientWndows;
    private javax.swing.JLabel dashboardLog;
    private javax.swing.JLabel stopTomcat1;
    private javax.swing.JLabel stopTomcat2;
    private javax.swing.JLabel stopTomcat3;
    private javax.swing.JLabel stopTomcat4;
    private javax.swing.JLabel stopTomcat5;
    private javax.swing.JLabel stopTomcat6;
    private javax.swing.JLabel systemIp;
    // End of variables declaration//GEN-END:variables
}

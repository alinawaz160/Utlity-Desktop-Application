/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package i2putility.subScreens;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import i2putility.components.RoundedPanel;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Alee
 */
public class Menu2 extends javax.swing.JInternalFrame {

    Color DefaultColor,HoveredColor; 
    public Menu2() {
        initComponents();
        this.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        
        DefaultColor=new Color(54,70,78);
        HoveredColor = new Color(240,151,70);
        
        createDatabase.setBackground(DefaultColor);
        restoreDatabase.setBackground(DefaultColor);
        dropDatabase.setBackground(DefaultColor);
        backupDatabase.setBackground(DefaultColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createDatabase = new RoundedPanel(50);
        stopTomcat1 = new javax.swing.JLabel();
        restoreDatabase = new RoundedPanel(50);
        stopTomcat3 = new javax.swing.JLabel();
        dropDatabase = new RoundedPanel(50);
        stopTomcat4 = new javax.swing.JLabel();
        backupDatabase = new RoundedPanel(50);
        stopTomcat5 = new javax.swing.JLabel();
        databaseStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(770, 510));

        createDatabase.setBackground(new java.awt.Color(54, 70, 78));
        createDatabase.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                createDatabaseMouseMoved(evt);
            }
        });
        createDatabase.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                createDatabaseMouseWheelMoved(evt);
            }
        });
        createDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createDatabaseMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                createDatabaseMouseExited(evt);
            }
        });

        stopTomcat1.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        stopTomcat1.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-database-94.png"))); // NOI18N
        stopTomcat1.setText("Create");
        stopTomcat1.setPreferredSize(new java.awt.Dimension(129, 129));

        javax.swing.GroupLayout createDatabaseLayout = new javax.swing.GroupLayout(createDatabase);
        createDatabase.setLayout(createDatabaseLayout);
        createDatabaseLayout.setHorizontalGroup(
            createDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        createDatabaseLayout.setVerticalGroup(
            createDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createDatabaseLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(stopTomcat1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        restoreDatabase.setBackground(new java.awt.Color(54, 70, 78));
        restoreDatabase.setPreferredSize(new java.awt.Dimension(182, 115));
        restoreDatabase.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                restoreDatabaseMouseMoved(evt);
            }
        });
        restoreDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restoreDatabaseMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                restoreDatabaseMouseExited(evt);
            }
        });

        stopTomcat3.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        stopTomcat3.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-database-96 (2).png"))); // NOI18N
        stopTomcat3.setText("Restore");
        stopTomcat3.setPreferredSize(new java.awt.Dimension(129, 129));

        javax.swing.GroupLayout restoreDatabaseLayout = new javax.swing.GroupLayout(restoreDatabase);
        restoreDatabase.setLayout(restoreDatabaseLayout);
        restoreDatabaseLayout.setHorizontalGroup(
            restoreDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restoreDatabaseLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(stopTomcat3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        restoreDatabaseLayout.setVerticalGroup(
            restoreDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restoreDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        dropDatabase.setBackground(new java.awt.Color(54, 70, 78));
        dropDatabase.setPreferredSize(new java.awt.Dimension(182, 115));
        dropDatabase.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                dropDatabaseMouseMoved(evt);
            }
        });
        dropDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dropDatabaseMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                dropDatabaseMouseExited(evt);
            }
        });

        stopTomcat4.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        stopTomcat4.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopTomcat4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-database-96.png"))); // NOI18N
        stopTomcat4.setText("Drop");
        stopTomcat4.setPreferredSize(new java.awt.Dimension(129, 129));

        javax.swing.GroupLayout dropDatabaseLayout = new javax.swing.GroupLayout(dropDatabase);
        dropDatabase.setLayout(dropDatabaseLayout);
        dropDatabaseLayout.setHorizontalGroup(
            dropDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropDatabaseLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(stopTomcat4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dropDatabaseLayout.setVerticalGroup(
            dropDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        backupDatabase.setBackground(new java.awt.Color(54, 70, 78));
        backupDatabase.setPreferredSize(new java.awt.Dimension(182, 115));
        backupDatabase.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backupDatabaseMouseMoved(evt);
            }
        });
        backupDatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backupDatabaseMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backupDatabaseMouseExited(evt);
            }
        });

        stopTomcat5.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        stopTomcat5.setForeground(new java.awt.Color(255, 255, 255));
        stopTomcat5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        stopTomcat5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-database-96 (1).png"))); // NOI18N
        stopTomcat5.setText("Backup");
        stopTomcat5.setPreferredSize(new java.awt.Dimension(129, 129));

        javax.swing.GroupLayout backupDatabaseLayout = new javax.swing.GroupLayout(backupDatabase);
        backupDatabase.setLayout(backupDatabaseLayout);
        backupDatabaseLayout.setHorizontalGroup(
            backupDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backupDatabaseLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(stopTomcat5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        backupDatabaseLayout.setVerticalGroup(
            backupDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backupDatabaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopTomcat5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(databaseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(createDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backupDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(restoreDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(dropDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addGap(85, 85, 85))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backupDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restoreDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65)
                .addComponent(databaseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createDatabaseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createDatabaseMouseMoved
        createDatabase.setBackground(HoveredColor);
    }//GEN-LAST:event_createDatabaseMouseMoved

    private void createDatabaseMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_createDatabaseMouseWheelMoved

    }//GEN-LAST:event_createDatabaseMouseWheelMoved

    private void createDatabaseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createDatabaseMouseExited
        createDatabase.setBackground(DefaultColor);
    }//GEN-LAST:event_createDatabaseMouseExited

    private void restoreDatabaseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restoreDatabaseMouseMoved
        restoreDatabase.setBackground(HoveredColor);
    }//GEN-LAST:event_restoreDatabaseMouseMoved

    private void restoreDatabaseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restoreDatabaseMouseExited
        restoreDatabase.setBackground(DefaultColor);
    }//GEN-LAST:event_restoreDatabaseMouseExited

    private void createDatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createDatabaseMouseClicked
        try{
            this.createAndDropDatabase("createdb");
        }catch(Exception e){
           Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE,null,e);
        }
    }//GEN-LAST:event_createDatabaseMouseClicked

    private void restoreDatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restoreDatabaseMouseClicked
        try {
            this.restoreBackup();
        } catch (Exception ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_restoreDatabaseMouseClicked

    private void dropDatabaseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropDatabaseMouseMoved
        dropDatabase.setBackground(HoveredColor);
    }//GEN-LAST:event_dropDatabaseMouseMoved

    private void dropDatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropDatabaseMouseClicked
        try{
            this.createAndDropDatabase("dropdb");
        }catch(Exception e){
           Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE,null,e);
        }
    }//GEN-LAST:event_dropDatabaseMouseClicked

    private void dropDatabaseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dropDatabaseMouseExited
        dropDatabase.setBackground(DefaultColor);
    }//GEN-LAST:event_dropDatabaseMouseExited

    private void backupDatabaseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backupDatabaseMouseMoved
        backupDatabase.setBackground(HoveredColor);
    }//GEN-LAST:event_backupDatabaseMouseMoved

    private void backupDatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backupDatabaseMouseClicked
        try {
            this.createBackup();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_backupDatabaseMouseClicked

    private void backupDatabaseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backupDatabaseMouseExited
        backupDatabase.setBackground(DefaultColor);
    }//GEN-LAST:event_backupDatabaseMouseExited

    
private void createBackup() throws FileNotFoundException {
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fc.showOpenDialog(new JPanel());

        if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedDirectory = fc.getSelectedFile();
                String directory = selectedDirectory.getAbsolutePath();
            String batFilePath = "src/assets/backup.bat";
            JOptionPane jp = new JOptionPane();
            jp.setToolTipText("Note:grant permission to user first");
            String pgUser = jp.showInputDialog("Enter PG User:");
            String pgPassword = JOptionPane.showInputDialog("Enter PG Password:");

            String line = "SET PG_USER=" + pgUser + "\n"
                    + "SET PG_DATABASE=posdb\n"
                    + "SET PGPASSWORD=" + pgPassword + "\n"
                    +"SET FILE_STORAGE_PATH=\"" + directory+ "\"\n"
                    + "SET DUMP_FILENAME=%FILE_STORAGE_PATH%\\%PG_DATABASE%.sql\n"
                    + "\"C:/I2p/pgsql/bin/pg_dump.exe\" -h \"localhost\" -U %PG_USER% -f %DUMP_FILENAME% %PG_DATABASE%";
            
            try (PrintWriter pw = new PrintWriter(batFilePath)) {
                pw.print("");
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(batFilePath, true))) {
                writer.write(line);
            } catch (IOException e) {
                e.printStackTrace();
            }
            executeBatFile(batFilePath);
        }
    }

    private void executeBatFile(String batFilePath) {
        try {
            Process process = Runtime.getRuntime().exec(batFilePath);
            int exitCode = process.waitFor();
            if (exitCode == 0) {
                databaseStatus.setText("Backup Created");
            } else {
                 InputStream stderr = process.getErrorStream();
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        String finalLine = line;
                        SwingUtilities.invokeLater(() -> databaseStatus.setText(finalLine + "\n"));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
    
    private Boolean createAndDropDatabase(String fileName){
        String pgUser = JOptionPane.showInputDialog("Enter PG User:");
        String pgPassword = JOptionPane.showInputDialog("Enter PG Password:");
        String pgdb = JOptionPane.showInputDialog("Enter Database Name:");
        Boolean permission = false;
        if(fileName == "createdb"){
            permission = grantPrivilege(pgUser,"NXCpThfwt6DPQJKaw","C:/I2p/pgsql/bin");
        }
        if(permission == true || fileName == "dropdb"){
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", fileName+" -U "+pgUser+" "+pgdb);
        Map<String, String> environment = builder.environment();
        environment.put("PGPASSWORD", pgPassword);
        builder.directory(new File("C:/I2p/pgsql/bin"));
        Process process = null;
        try {
            process = builder.start();
        } catch (IOException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Wait for the process to complete
        int exitCode = 0;
        try {
            exitCode = process.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (exitCode == 0) {
           databaseStatus.setText("Command Executed Succefully" + "");
        } else {
            InputStream stderr = process.getErrorStream();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String finalLine = line;
                    SwingUtilities.invokeLater(() -> databaseStatus.setText(finalLine + "\n"));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
           }
        }
        return true;
    }
    
        private Boolean grantPrivilege(String username, String password ,String directory){
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", "psql", "-U", "postgres", "-c", "ALTER USER " + username + " CREATEDB;");
        Map<String, String> environment = builder.environment();
        environment.put("PGPASSWORD", password);
        builder.directory(new File(directory));
        Process process = null;
        try {
            process = builder.start();
        } catch (IOException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Wait for the process to complete
        int exitCode = 0;
        try {
            exitCode = process.waitFor();
        } catch (InterruptedException ex) {
            Logger.getLogger(Menu2.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (exitCode == 0) {
            databaseStatus.setText("Access Granted" + " ");
        } else {
            InputStream stderr = process.getErrorStream();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String finalLine = line;
                    SwingUtilities.invokeLater(() -> databaseStatus.setText(finalLine + "\n"));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
            return true;
    }
        
    private void restoreBackup(){

      final JFileChooser fc = new JFileChooser();
    int returnValue = fc.showOpenDialog(new JPanel());

    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        String pgUser = JOptionPane.showInputDialog("Enter PG User:");
        String pgPassword = JOptionPane.showInputDialog("Enter PG Password:");
        String pgdb = JOptionPane.showInputDialog("Enter Database Name:");
      String command = "psql -U "+pgUser+" -d "+pgdb+" -f "+ file;
      String directory = "C:/I2p/pgsql/bin";
    try {
        String runAsCommand = String.format("cmd.exe", "/c",command);
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", command);
        Map<String, String> environment = builder.environment();
        environment.put("PGPASSWORD", pgPassword);
        builder.directory(new File(directory));
        Process process = builder.start();
        int exitCode = process.waitFor();

        if (exitCode == 0) {
            databaseStatus.setText("Backup Restored");
        } else {
             InputStream stderr = process.getErrorStream();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String finalLine = line;
                    SwingUtilities.invokeLater(() -> databaseStatus.setText(finalLine + "\n"));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
      }
      }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backupDatabase;
    private javax.swing.JPanel createDatabase;
    private javax.swing.JLabel databaseStatus;
    private javax.swing.JPanel dropDatabase;
    private javax.swing.JPanel restoreDatabase;
    private javax.swing.JLabel stopTomcat1;
    private javax.swing.JLabel stopTomcat3;
    private javax.swing.JLabel stopTomcat4;
    private javax.swing.JLabel stopTomcat5;
    // End of variables declaration//GEN-END:variables
}
